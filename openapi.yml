openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: https://burakergen.vercel.app/
  contact:
    email: burak.ergen@outlook.com.tr
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:3000
tags:
  - name: blog
    description: Access to Blogs
  - name: store
    description: Access to Categories
  - name: user
    description: Operations about user
paths:
  /blogs:
    get:
      tags:
        - blog
      summary: Update an existing blog
      description: Update an existing blog by Id
      operationId: updateBlog
      requestBody:
        description: Update an existent blog in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
          application/xml:
            schema:
              $ref: '#/components/schemas/Blog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Blog'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
            application/xml:
              schema:
                $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - blog
      summary: Add a new blog to the store
      description: Add a new blog to the store
      operationId: addPet
      requestBody:
        description: Create a new blog in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
          application/xml:
            schema:
              $ref: '#/components/schemas/Blog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Blog'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
            application/xml:
              schema:
                $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Blog:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          example: blogs
        content:
          type: string
          example: blogs
        category:
          $ref: '#/components/schemas/Category'
        photo:
          type: string
        tags:
          type: array
          xml:
            wrapped: true
          items:
            type: string
        status:
          type: string
          description: pet status in the store
          enum:
            - published
            - draft
            - deleted
      xml:
        name: blog
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Blog:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Blog'
        application/xml:
          schema:
            $ref: '#/components/schemas/Blog'
