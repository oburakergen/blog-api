openapi: 3.0.3
info:
  title: Swagger Blog Api - OpenAPI 3.0
  termsOfService: https://burakergen.vercel.app/
  contact:
    email: burak.ergen@outlook.com.tr
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:4000
tags:
  - name: blog
  - name: category
  - name: tagging
paths:
  /blogs:
    get:
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 20)
          required: false
          schema:
            type: integer
            format: int32
            default: 20
            maximum: 20
            minimum: 1
        - name: page
          in: query
          description: The page number
          required: false
          schema:
              type: integer
              format: int32
              default: 1
              minimum: 1
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          schema:
            type: string
            enum:
              - published
              - draft
              - deleted
      tags:
        - blog
      summary: List all blogs
      description: list all blogs
      operationId: getBlogs
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid ID supplied
        '404':
          description: Blog not found
        '422':
          description: Validation exception
    post:
      tags:
        - blog
      summary: Add a new blog to the store
      description: Add a new blog to the store
      operationId: addPet
      requestBody:
        description: Create a new blog in the store
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Blog'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    put:
      parameters:
        - name: id
          in: path
          description: ID of blog that needs to be updated
          required: true
          schema:
            type: string
      tags:
        - blog
      summary: Update an existing blog
      description: Update an existing blog
      operationId: updateBlog
      responses:
        '200':
          description: Successful operation
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid ID supplied
        '404':
          description: Blog not found
        '422':
          description: Validation exception
      requestBody:
          description: Update an existing blog in the store
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/Blog'
          required: true
    delete:
        parameters:
          - name: id
            in: path
            description: ID of blog that needs to be deleted
            required: true
            schema:
                type: string
        tags:
            - blog
        summary: Delete a blog
        description: Delete a blog
        operationId: deleteBlog
        responses:
            '200':
              description: Successful operation
            '400':
              description: Invalid ID supplied
            '404':
              description: Blog not found
            '422':
              description: Validation exception
  /categories:
    get:
      tags:
        - category
      summary: List all categories
      description: list all categories
      operationId: getCategories
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
        '422':
          description: Validation exception
    post:
      tags:
        - category
      summary: Add a new category to the store
      description: Add a new category to the store
      operationId: addPet
      requestBody:
        description: Create a new category in the store
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    put:
      parameters:
        - name: id
          in: path
          description: ID of blog that needs to be updated
          required: true
          schema:
            type: string
      tags:
        - category
      summary: Update an existing category
      description: Update an existing category
      operationId: updateCategory
      responses:
        '200':
          description: Successful operation
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
        '422':
          description: Validation exception
      requestBody:
        description: Update an existing category in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
    delete:
      parameters:
        - name: id
          in: path
          description: ID of category that needs to be deleted
          required: true
          schema:
            type: string
      tags:
        - category
      summary: Delete a category
      description: Delete a category
      operationId: deleteCategory
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
        '422':
          description: Validation exception
  /tags:
    get:
      tags:
        - tagging
      summary: List all tags
      description: list all tags
      operationId: getTags
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tagging'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tag not found
        '422':
          description: Validation exception
    post:
      tags:
        - tagging
      summary: Add a new tag to the store
      description: Add a new tag to the store
      operationId: addPet
      requestBody:
        description: Create a new tag in the store
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tagging'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tagging'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /tags/{tagId}:
    put:
      parameters:
        - name: tagId
          in: path
          description: ID of tag that needs to be updated
          required: true
          schema:
            type: string
      tags:
        - tagging
      summary: Update an existing tag
      description: Update an existing tag
      operationId: updateTag
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tagging'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tag not found
        '422':
          description: Validation exception
      requestBody:
        description: Update an existing tag in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tagging'
        required: true
    delete:
      parameters:
        - name: tagId
          in: path
          description: ID of tag that needs to be deleted
          required: true
          schema:
            type: string
      tags:
        - tagging
      summary: Delete a tag
      description: Delete a tag
      operationId: deleteTag
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Tag not found
        '422':
          description: Validation exception
components:
  schemas:
    Tagging:
      type: object
      properties:
        title:
          type: string
    Category:
      required:
        - title
        - description
        - status
      type: object
      properties:
        title:
          type: string
          example: Blog title
        description:
          type: string
          example: Blog description
        photo:
          type: string
          format: binary
        status:
          type: string
          description: blog status in the store
          enum:
              - published
              - draft
              - deleted
        createdAt:
            type: "null"
            format: date-time
            example: 2021-09-01T00:00:00.000Z
            nullable: true
        parentId:
            oneOf:
              - type: "string"
              - type: "null"
            example: 1
    Blog:
      required:
        - title
        - category
        - status
        - content
        - photo
        - tags
      type: object
      properties:
        title:
          type: string
          example: blogs
        content:
          type: string
          example: blogs
        category:
          type: string
        photo:
          type: string
          format: binary
        tags:
          type: array
          xml:
            wrapped: true
          items:
            type: string
        status:
          type: string
          description: blog status in the store
          enum:
            - published
            - draft
            - deleted
        createdAt:
          type: "null"
          format: date-time
          nullable: true
    ApiResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        data:
          type: array
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Blog:
      description: Blog object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Blog'
        application/xml:
          schema:
            $ref: '#/components/schemas/Blog'
    Category:
      description: Category object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
        application/xml:
          schema:
            $ref: '#/components/schemas/Category'
    Tagging:
      description: Category object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tagging'
        application/xml:
          schema:
            $ref: '#/components/schemas/Tagging'
